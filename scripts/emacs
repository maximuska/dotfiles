;; -*- Mode: Emacs-Lisp -*-
;; .emacs

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(save-place t nil (saveplace))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(toolbar-visible-p nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:size "14" :family "DejaVu Sans Mono")))))

;; ________________________________________________________________
;;                 General settings
;; ________________________________________________________________

;; If we read a compressed file, uncompress it on the fly:
;; (this works with .tar.gz and .tgz file as well)
(auto-compression-mode 1)

;; Colour files (C++ files and others) by syntax to make them more readable:
(global-font-lock-mode t)

;; Highlight all syntax categories:
(setq font-lock-maximum-decoration t)

;; Highlight the marked region.
(setq-default transient-mark-mode t)

;; 'woman' mode is an improvement on 'man' mode for manual pages
(setq-default woman-use-own-frame nil)
;; Man-notify-method controls the behaviour of (wo)man mode.
;; do 'C-h v' and enter that variable to see options.
;; Uncomment the following line or modify it if you want
;; (setq-default Man-notify-method 'pushy)

;; Permanent display of line and column numbers is useful for programmers
(setq-default line-number-mode 't)
(setq-default column-number-mode 't)

;; Even if the file extension is just .c or .h, assume it is a C++ file:
(setq auto-mode-alist (cons '("\\.c\\'" . c++-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.h\\'" . c++-mode) auto-mode-alist))

;; ________________________________________________________
;;                        More custom stuff
;; ________________________________________________________

; Allow connections from emacs clients
(server-start)

;; Dont show the GNU splash screen
(setq inhibit-startup-message t)

;; get rid of the toolbar on top of the window
(tool-bar-mode 0)

;; IDO buffers select package
(require 'ido)
(ido-mode t)

; Tell cc-mode not to check for old-style (K&R) function declarations.
;; This speeds up indenting a lot.
(setq c-recognize-knr-p nil)

;; Preserver minibuffer history over consequent invocations
(require 'savehist)
(setq savehist-file "~/.emacs.d/history")
(setq savehist-autosave-interval 1)
(setq savehist-length 100)
(savehist-load)

; Saves the position the cursor was in a file before the file was closed.
;(load-library "saveplace")
;(setq save-place-file "~/.emacs/places")
;(setq shadow-todo-file "~/.emacs/shadow-todo")

;; Get rid of modeline information taking up too much space -- in
;; particular, minor modes that are always enabled.
(setq pending-delete-modeline-string "")
(setq filladapt-mode-line-string "")
;; lazy-lock doesn't have a variable for its modeline name, so we have
;; to do a bit of surgery.
(and (assoc 'lazy-lock-mode minor-mode-alist)
     (setcdr (cdr (cadr (assoc 'lazy-lock-mode minor-mode-alist))) ""))

;;; ********************
;;; Load a partial-completion mechanism, which makes minibuffer completion
;;; search multiple words instead of just prefixes; for example, the command
;;; `M-x byte-compile-and-load-file RET' can be abbreviated as `M-x b-c-a RET'
;;; because there are no other commands whose first three words begin with
;;; the letters `b', `c', and `a' respectively.
;;;
;(require 'completer)

;;; ********************
;;; Filladapt is an adaptive text-filling package.  When it is enabled it
;;; makes filling (e.g. using M-q) much much smarter about paragraphs
;;; that are indented and/or are set off with semicolons, dashes, etc.

;; (require 'filladapt)
;; (setq-default filladapt-mode t)
;; (when (fboundp 'turn-off-filladapt-mode)
;;   (add-hook 'c-mode-hook 'turn-off-filladapt-mode)
;;   (add-hook 'outline-mode-hook 'turn-off-filladapt-mode))

;; (require 'backup-dir) 
;; (setq bkup-backup-directory-info 
;;       '((t "~/.backups" ok-create full-path)))

(load-library "font-lock")
(font-lock-mode 4)

(setq default-tab-width 4)
(setq-default tab-width 4)

;; Change the indentation amount to 4 spaces instead of 2.
;; You have to do it in this complicated way because of the
;; strange way the cc-mode initializes the value of `c-basic-offset'.
(setq c-basic-offset 4)
(setq c-tab-width 4)
(setq c++-basic-offset 4)
(setq c++-tab-width 4)
(setq indent-tab-mode nil) ; Don't use tabs for indentation

;; Customizing programming modes using hooks...
(defun my-common-indent-settings()
  "Set of identation-related fixes applied to all programming modes"
  (c-set-style "Ellemtel")
  (setq c-basic-offset 2)
  (setq tab-width 4)
  (setq indent-tab-mode nil))
  
(add-hook 'c-mode-hook 'my-common-indent-settings)
(add-hook 'c++-mode-hook 'my-common-indent-settings)
(add-hook 'perl-mode-hook 'my-common-indent-settings)
; (lambda () (c-set-style "Ellemtel")(setq c-basic-offset 2)(setq tab-width 4)(setq indent-tab-mode nil)))

;; Treat .h files as C++
(setq auto-mode-alist (cons '("\\.h$" . c++-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))

;; Auto-break lines in C++ mode
(setq c++-mode-hook 'turn-on-auto-fill)

; Switch buffers on Ctrl-Tab
(require 'wcy-swbuff)
(global-set-key (kbd "<C-tab>") 'wcy-switch-buffer-forward)
(global-set-key (kbd "<C-S-kp-tab>") 'wcy-switch-buffer-backward)

(global-set-key [(mouse-3)] 'mouse-buffer-menu) ;;
(global-set-key [(control backspace)] 'backward-kill-word) ;; 

(if (fboundp 'pending-delete-mode)
    (pending-delete-mode 1))

; Minimize on F1
(global-set-key [f1] 'suspend-frame)

; Change Tab size quickly
(global-set-key [(control @)] (lambda () (interactive) (setq tab-width 2)))
(global-set-key [(control $)] (lambda () (interactive) (setq tab-width 4)))

(require 'tabbar)
(tabbar-mode t)

(defun my-tabbar-buffer-groups ()
   "Return the list of group names the current buffer belongs to.
 Returns one group for all buffers."
   (list
    (cond
	 ((string-match "^\\*.+\\*$" (buffer-name))
	  "Misc")
;	 ((member (buffer-name) '("*scratch*" "*Messages*"))
;	  "Misc")
	 ((eq major-mode 'dired-mode)
	  "Dired")
	 ((memq major-mode '(help-mode apropos-mode Info-mode Man-mode))
	  "Help")
	 (t
	  "Common"))))
(setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups)

;; (set-face-attribute
;;    'tabbar-default-face nil
;;    :background "gray60")
;; (set-face-attribute
;;  'tabbar-unselected-face nil
;;  :background "gray85"
;;  :foreground "gray30"
;;  :box nil)
;; (set-face-attribute
;;  'tabbar-selected-face nil
;;  :background "#f2f2f6"
;;  :foreground "black"
;;  :box nil)
;; (set-face-attribute
;;  'tabbar-button-face nil
;;  :box '(:line-width 1 :color "gray72" :style released-button))
;; (set-face-attribute
;;  'tabbar-separator-face nil
;;  :height 0.7)

(global-set-key [(meta left)] 'tabbar-backward)
(global-set-key [(meta right)] 'tabbar-forward)


;;
;;Color themes
;(require 'color-theme)
;(color-theme-initialize)
;(color-theme-xemacs)
;color-theme-bharadwaj-slate

; See: http://www.emacswiki.org/cgi-bin/wiki/FillAdapt
(setq filladapt-token-table
   (quote (("^" beginning-of-line)
           (">+" citation->)
           ("\\(\\w\\|[0-9]\\)[^'`\"< \t\n]*>[ \t]*" supercite-citation)
           (";+" lisp-comment)
           ("#+" sh-comment)
           ("%+" postscript-comment)
           ("^[ \t]*\\(//\\|\\*\\)[^ \t]*" c++-comment)
           ("@c[ \\t]" texinfo-comment)
           ("@comment[ \t]" texinfo-comment)
           ("\\\\item[ \t]" bullet)
           ("[0-9]+\\.[ \t]" bullet)
           ("[0-9]+\\(\\.[0-9]+\\)+[ \t]" bullet)
           ("[A-Za-z]\\.[ \t]" bullet)
           ("(?[0-9]+)[ \t]" bullet)
           ("(?[A-Za-z])[ \t]" bullet)
           ("[0-9]+[A-Za-z]\\.[ \t]" bullet)
           ("(?[0-9]+[A-Za-z])[ \t]" bullet)
           ("[-~*+]+[ \t]" bullet)
           ("o[ \t]" bullet)
           ("[\\@]\\(param\\|throw\\|exception\\|addtogroup\\|defgroup\\)[ \t]*[A-Za-z_][A-Za-z_0-9]*[ \t]+" bullet)
           ("[\\@][A-Za-z_]+[ \t]*" bullet)
           ("[ \t]+" space)
           ("$" end-of-line))))

;(require 'doxymacs)
;(add-hook 'c-mode-common-hook 'doxymacs-mode)
;(add-hook 'c++-mode-hook 'doxymacs-mode)

;(message "1")
;(when (boundp 'filladapt-token-table)
;  ;; add tokens to filladapt to match doxygen markup
;  (message "2")
;  (let ((bullet-regexp
;	 "[@\\]\\(param\\(?:\\s-*\\[\\(?:in\\|out\\|in,out\\)\\]\\)?\\s-+\\sw+\\|return\\)"))
;    (unless (assoc bullet-regexp filladapt-token-table)
;	  (message "3")
;      (setq filladapt-token-table
;	    (append filladapt-token-table
;		    (list (list bullet-regexp 'bullet)))))))

